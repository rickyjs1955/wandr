# Production Dockerfile for React Frontend
# Multi-stage build: Build React app, then serve with nginx

# Stage 1: Builder - Build React application
FROM node:20-alpine as builder

# Set working directory
WORKDIR /build

# Copy package files
COPY package*.json ./

# Install dependencies (including devDependencies for build)
RUN npm ci --silent

# Copy source code
COPY . .

# Build production bundle
# This creates optimized static files in /build/dist
ENV NODE_ENV=production
RUN npm run build

# Stage 2: Runtime - Serve with nginx
FROM nginx:alpine as runtime

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built static files from builder stage
COPY --from=builder /build/dist /usr/share/nginx/html

# Create non-root user for nginx
RUN addgroup -g 101 -S nginx-app && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx-app -g nginx-app nginx-app

# Set correct permissions
RUN chown -R nginx-app:nginx-app /usr/share/nginx/html && \
    chown -R nginx-app:nginx-app /var/cache/nginx && \
    chown -R nginx-app:nginx-app /var/log/nginx && \
    chown -R nginx-app:nginx-app /etc/nginx/conf.d

# Create nginx pid directory with correct permissions
RUN touch /var/run/nginx.pid && \
    chown -R nginx-app:nginx-app /var/run/nginx.pid

# Switch to non-root user
USER nginx-app

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
